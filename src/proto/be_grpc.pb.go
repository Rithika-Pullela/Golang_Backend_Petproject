// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: src/proto/be.proto

package src

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniversityFuncClient is the client API for UniversityFunc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversityFuncClient interface {
	AddCourse(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error)
	AddStudent(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	AddFaculty(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	AddEnrollment(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*Status, error)
	AddAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error)
	GetCourseByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error)
	GetStudentByEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetFacultyByEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetAllCourses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourseList, error)
	GetCoursesEnrolledByStudentEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*CourseList, error)
	GetCoursesByFacultyEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*CourseList, error)
	GetFacultyByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*User, error)
	GetStudentsEnrolledByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*UserList, error)
	GetAssignmentsByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*AssignmentList, error)
	UpdateCourse(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error)
	UpdateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error)
}

type universityFuncClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversityFuncClient(cc grpc.ClientConnInterface) UniversityFuncClient {
	return &universityFuncClient{cc}
}

func (c *universityFuncClient) AddCourse(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error) {
	out := new(CourseDetails)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/AddCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) AddStudent(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) AddFaculty(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/AddFaculty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) AddEnrollment(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/AddEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) AddAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/AddAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetCourseByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error) {
	out := new(CourseDetails)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetCourseByCourseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetStudentByEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetStudentByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetFacultyByEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetFacultyByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetAllCourses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourseList, error) {
	out := new(CourseList)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetAllCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetCoursesEnrolledByStudentEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*CourseList, error) {
	out := new(CourseList)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetCoursesEnrolledByStudentEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetCoursesByFacultyEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*CourseList, error) {
	out := new(CourseList)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetCoursesByFacultyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetFacultyByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetFacultyByCourseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetStudentsEnrolledByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetStudentsEnrolledByCourseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) GetAssignmentsByCourseId(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*AssignmentList, error) {
	out := new(AssignmentList)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/GetAssignmentsByCourseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) UpdateCourse(ctx context.Context, in *CourseDetails, opts ...grpc.CallOption) (*CourseDetails, error) {
	out := new(CourseDetails)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityFuncClient) UpdateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/backendProto.UniversityFunc/UpdateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversityFuncServer is the server API for UniversityFunc service.
// All implementations must embed UnimplementedUniversityFuncServer
// for forward compatibility
type UniversityFuncServer interface {
	AddCourse(context.Context, *CourseDetails) (*CourseDetails, error)
	AddStudent(context.Context, *User) (*User, error)
	AddFaculty(context.Context, *User) (*User, error)
	AddEnrollment(context.Context, *EnrollRequest) (*Status, error)
	AddAssignment(context.Context, *Assignment) (*Assignment, error)
	GetCourseByCourseId(context.Context, *CourseDetails) (*CourseDetails, error)
	GetStudentByEmail(context.Context, *User) (*User, error)
	GetFacultyByEmail(context.Context, *User) (*User, error)
	GetAllCourses(context.Context, *Empty) (*CourseList, error)
	GetCoursesEnrolledByStudentEmail(context.Context, *User) (*CourseList, error)
	GetCoursesByFacultyEmail(context.Context, *User) (*CourseList, error)
	GetFacultyByCourseId(context.Context, *CourseDetails) (*User, error)
	GetStudentsEnrolledByCourseId(context.Context, *CourseDetails) (*UserList, error)
	GetAssignmentsByCourseId(context.Context, *CourseDetails) (*AssignmentList, error)
	UpdateCourse(context.Context, *CourseDetails) (*CourseDetails, error)
	UpdateAssignment(context.Context, *Assignment) (*Assignment, error)
	mustEmbedUnimplementedUniversityFuncServer()
}

// UnimplementedUniversityFuncServer must be embedded to have forward compatible implementations.
type UnimplementedUniversityFuncServer struct {
}

func (UnimplementedUniversityFuncServer) AddCourse(context.Context, *CourseDetails) (*CourseDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedUniversityFuncServer) AddStudent(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedUniversityFuncServer) AddFaculty(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFaculty not implemented")
}
func (UnimplementedUniversityFuncServer) AddEnrollment(context.Context, *EnrollRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnrollment not implemented")
}
func (UnimplementedUniversityFuncServer) AddAssignment(context.Context, *Assignment) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssignment not implemented")
}
func (UnimplementedUniversityFuncServer) GetCourseByCourseId(context.Context, *CourseDetails) (*CourseDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseByCourseId not implemented")
}
func (UnimplementedUniversityFuncServer) GetStudentByEmail(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByEmail not implemented")
}
func (UnimplementedUniversityFuncServer) GetFacultyByEmail(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacultyByEmail not implemented")
}
func (UnimplementedUniversityFuncServer) GetAllCourses(context.Context, *Empty) (*CourseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCourses not implemented")
}
func (UnimplementedUniversityFuncServer) GetCoursesEnrolledByStudentEmail(context.Context, *User) (*CourseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesEnrolledByStudentEmail not implemented")
}
func (UnimplementedUniversityFuncServer) GetCoursesByFacultyEmail(context.Context, *User) (*CourseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByFacultyEmail not implemented")
}
func (UnimplementedUniversityFuncServer) GetFacultyByCourseId(context.Context, *CourseDetails) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacultyByCourseId not implemented")
}
func (UnimplementedUniversityFuncServer) GetStudentsEnrolledByCourseId(context.Context, *CourseDetails) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsEnrolledByCourseId not implemented")
}
func (UnimplementedUniversityFuncServer) GetAssignmentsByCourseId(context.Context, *CourseDetails) (*AssignmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentsByCourseId not implemented")
}
func (UnimplementedUniversityFuncServer) UpdateCourse(context.Context, *CourseDetails) (*CourseDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedUniversityFuncServer) UpdateAssignment(context.Context, *Assignment) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedUniversityFuncServer) mustEmbedUnimplementedUniversityFuncServer() {}

// UnsafeUniversityFuncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversityFuncServer will
// result in compilation errors.
type UnsafeUniversityFuncServer interface {
	mustEmbedUnimplementedUniversityFuncServer()
}

func RegisterUniversityFuncServer(s grpc.ServiceRegistrar, srv UniversityFuncServer) {
	s.RegisterService(&UniversityFunc_ServiceDesc, srv)
}

func _UniversityFunc_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/AddCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).AddCourse(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).AddStudent(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_AddFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).AddFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/AddFaculty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).AddFaculty(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_AddEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).AddEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/AddEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).AddEnrollment(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_AddAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).AddAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/AddAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).AddAssignment(ctx, req.(*Assignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetCourseByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetCourseByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetCourseByCourseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetCourseByCourseId(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetStudentByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetStudentByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetStudentByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetStudentByEmail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetFacultyByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetFacultyByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetFacultyByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetFacultyByEmail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetAllCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetAllCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetAllCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetAllCourses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetCoursesEnrolledByStudentEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetCoursesEnrolledByStudentEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetCoursesEnrolledByStudentEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetCoursesEnrolledByStudentEmail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetCoursesByFacultyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetCoursesByFacultyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetCoursesByFacultyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetCoursesByFacultyEmail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetFacultyByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetFacultyByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetFacultyByCourseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetFacultyByCourseId(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetStudentsEnrolledByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetStudentsEnrolledByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetStudentsEnrolledByCourseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetStudentsEnrolledByCourseId(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_GetAssignmentsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).GetAssignmentsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/GetAssignmentsByCourseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).GetAssignmentsByCourseId(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).UpdateCourse(ctx, req.(*CourseDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityFunc_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityFuncServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backendProto.UniversityFunc/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityFuncServer).UpdateAssignment(ctx, req.(*Assignment))
	}
	return interceptor(ctx, in, info, handler)
}

// UniversityFunc_ServiceDesc is the grpc.ServiceDesc for UniversityFunc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniversityFunc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backendProto.UniversityFunc",
	HandlerType: (*UniversityFuncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourse",
			Handler:    _UniversityFunc_AddCourse_Handler,
		},
		{
			MethodName: "AddStudent",
			Handler:    _UniversityFunc_AddStudent_Handler,
		},
		{
			MethodName: "AddFaculty",
			Handler:    _UniversityFunc_AddFaculty_Handler,
		},
		{
			MethodName: "AddEnrollment",
			Handler:    _UniversityFunc_AddEnrollment_Handler,
		},
		{
			MethodName: "AddAssignment",
			Handler:    _UniversityFunc_AddAssignment_Handler,
		},
		{
			MethodName: "GetCourseByCourseId",
			Handler:    _UniversityFunc_GetCourseByCourseId_Handler,
		},
		{
			MethodName: "GetStudentByEmail",
			Handler:    _UniversityFunc_GetStudentByEmail_Handler,
		},
		{
			MethodName: "GetFacultyByEmail",
			Handler:    _UniversityFunc_GetFacultyByEmail_Handler,
		},
		{
			MethodName: "GetAllCourses",
			Handler:    _UniversityFunc_GetAllCourses_Handler,
		},
		{
			MethodName: "GetCoursesEnrolledByStudentEmail",
			Handler:    _UniversityFunc_GetCoursesEnrolledByStudentEmail_Handler,
		},
		{
			MethodName: "GetCoursesByFacultyEmail",
			Handler:    _UniversityFunc_GetCoursesByFacultyEmail_Handler,
		},
		{
			MethodName: "GetFacultyByCourseId",
			Handler:    _UniversityFunc_GetFacultyByCourseId_Handler,
		},
		{
			MethodName: "GetStudentsEnrolledByCourseId",
			Handler:    _UniversityFunc_GetStudentsEnrolledByCourseId_Handler,
		},
		{
			MethodName: "GetAssignmentsByCourseId",
			Handler:    _UniversityFunc_GetAssignmentsByCourseId_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _UniversityFunc_UpdateCourse_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _UniversityFunc_UpdateAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/be.proto",
}
