// Code generated by MockGen. DO NOT EDIT.
// Source: src/db/database.go

// Package Mocks is a generated GoMock package.
package Mocks

import (
	structs "beprj/src/Structs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddCoursetoStd mocks base method.
func (m *MockDatabase) AddCoursetoStd(arg0 int32, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoursetoStd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoursetoStd indicates an expected call of AddCoursetoStd.
func (mr *MockDatabaseMockRecorder) AddCoursetoStd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoursetoStd", reflect.TypeOf((*MockDatabase)(nil).AddCoursetoStd), arg0, arg1)
}

// AddFacToCourse mocks base method.
func (m *MockDatabase) AddFacToCourse(arg0 int32, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFacToCourse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFacToCourse indicates an expected call of AddFacToCourse.
func (mr *MockDatabaseMockRecorder) AddFacToCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFacToCourse", reflect.TypeOf((*MockDatabase)(nil).AddFacToCourse), arg0, arg1)
}

// CheckCourseExistance mocks base method.
func (m *MockDatabase) CheckCourseExistance(arg0 int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCourseExistance", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCourseExistance indicates an expected call of CheckCourseExistance.
func (mr *MockDatabaseMockRecorder) CheckCourseExistance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCourseExistance", reflect.TypeOf((*MockDatabase)(nil).CheckCourseExistance), arg0)
}

// CheckFacultyExistance mocks base method.
func (m *MockDatabase) CheckFacultyExistance(arg0 int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFacultyExistance", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFacultyExistance indicates an expected call of CheckFacultyExistance.
func (mr *MockDatabaseMockRecorder) CheckFacultyExistance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFacultyExistance", reflect.TypeOf((*MockDatabase)(nil).CheckFacultyExistance), arg0)
}

// CreateAssignment mocks base method.
func (m *MockDatabase) CreateAssignment(arg0, arg1, arg2 string, arg3 int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssignment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssignment indicates an expected call of CreateAssignment.
func (mr *MockDatabaseMockRecorder) CreateAssignment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssignment", reflect.TypeOf((*MockDatabase)(nil).CreateAssignment), arg0, arg1, arg2, arg3)
}

// CreateCourse mocks base method.
func (m *MockDatabase) CreateCourse(arg0, arg1 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockDatabaseMockRecorder) CreateCourse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockDatabase)(nil).CreateCourse), arg0, arg1)
}

// CreateFaculty mocks base method.
func (m *MockDatabase) CreateFaculty(arg0, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFaculty", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFaculty indicates an expected call of CreateFaculty.
func (mr *MockDatabaseMockRecorder) CreateFaculty(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFaculty", reflect.TypeOf((*MockDatabase)(nil).CreateFaculty), arg0, arg1, arg2)
}

// CreateStudent mocks base method.
func (m *MockDatabase) CreateStudent(arg0, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockDatabaseMockRecorder) CreateStudent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockDatabase)(nil).CreateStudent), arg0, arg1, arg2)
}

// GetAllCourses mocks base method.
func (m *MockDatabase) GetAllCourses() ([]structs.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCourses")
	ret0, _ := ret[0].([]structs.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCourses indicates an expected call of GetAllCourses.
func (mr *MockDatabaseMockRecorder) GetAllCourses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCourses", reflect.TypeOf((*MockDatabase)(nil).GetAllCourses))
}

// GetAssignmentsByCourseId mocks base method.
func (m *MockDatabase) GetAssignmentsByCourseId(arg0 int32) ([]structs.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignmentsByCourseId", arg0)
	ret0, _ := ret[0].([]structs.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignmentsByCourseId indicates an expected call of GetAssignmentsByCourseId.
func (mr *MockDatabaseMockRecorder) GetAssignmentsByCourseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignmentsByCourseId", reflect.TypeOf((*MockDatabase)(nil).GetAssignmentsByCourseId), arg0)
}

// GetCourseByCourseId mocks base method.
func (m *MockDatabase) GetCourseByCourseId(arg0 int32) (structs.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseByCourseId", arg0)
	ret0, _ := ret[0].(structs.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseByCourseId indicates an expected call of GetCourseByCourseId.
func (mr *MockDatabaseMockRecorder) GetCourseByCourseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseByCourseId", reflect.TypeOf((*MockDatabase)(nil).GetCourseByCourseId), arg0)
}

// GetCoursesByFacultyEmail mocks base method.
func (m *MockDatabase) GetCoursesByFacultyEmail(arg0 string) ([]structs.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesByFacultyEmail", arg0)
	ret0, _ := ret[0].([]structs.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesByFacultyEmail indicates an expected call of GetCoursesByFacultyEmail.
func (mr *MockDatabaseMockRecorder) GetCoursesByFacultyEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesByFacultyEmail", reflect.TypeOf((*MockDatabase)(nil).GetCoursesByFacultyEmail), arg0)
}

// GetCoursesEnrolledByStudentEmail mocks base method.
func (m *MockDatabase) GetCoursesEnrolledByStudentEmail(arg0 string) ([]structs.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesEnrolledByStudentEmail", arg0)
	ret0, _ := ret[0].([]structs.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesEnrolledByStudentEmail indicates an expected call of GetCoursesEnrolledByStudentEmail.
func (mr *MockDatabaseMockRecorder) GetCoursesEnrolledByStudentEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesEnrolledByStudentEmail", reflect.TypeOf((*MockDatabase)(nil).GetCoursesEnrolledByStudentEmail), arg0)
}

// GetFaculty mocks base method.
func (m *MockDatabase) GetFaculty(arg0 string) (structs.Faculty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaculty", arg0)
	ret0, _ := ret[0].(structs.Faculty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaculty indicates an expected call of GetFaculty.
func (mr *MockDatabaseMockRecorder) GetFaculty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaculty", reflect.TypeOf((*MockDatabase)(nil).GetFaculty), arg0)
}

// GetFacultyByCourseId mocks base method.
func (m *MockDatabase) GetFacultyByCourseId(arg0 int32) (structs.Faculty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacultyByCourseId", arg0)
	ret0, _ := ret[0].(structs.Faculty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacultyByCourseId indicates an expected call of GetFacultyByCourseId.
func (mr *MockDatabaseMockRecorder) GetFacultyByCourseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacultyByCourseId", reflect.TypeOf((*MockDatabase)(nil).GetFacultyByCourseId), arg0)
}

// GetStudent mocks base method.
func (m *MockDatabase) GetStudent(arg0 string) (structs.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0)
	ret0, _ := ret[0].(structs.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockDatabaseMockRecorder) GetStudent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockDatabase)(nil).GetStudent), arg0)
}

// GetStudentsEnrolledByCourseId mocks base method.
func (m *MockDatabase) GetStudentsEnrolledByCourseId(arg0 int32) ([]structs.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsEnrolledByCourseId", arg0)
	ret0, _ := ret[0].([]structs.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsEnrolledByCourseId indicates an expected call of GetStudentsEnrolledByCourseId.
func (mr *MockDatabaseMockRecorder) GetStudentsEnrolledByCourseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsEnrolledByCourseId", reflect.TypeOf((*MockDatabase)(nil).GetStudentsEnrolledByCourseId), arg0)
}

// UpdateAssignment mocks base method.
func (m *MockDatabase) UpdateAssignment(arg0 structs.Assignment, arg1 int32) (structs.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssignment", arg0, arg1)
	ret0, _ := ret[0].(structs.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssignment indicates an expected call of UpdateAssignment.
func (mr *MockDatabaseMockRecorder) UpdateAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignment", reflect.TypeOf((*MockDatabase)(nil).UpdateAssignment), arg0, arg1)
}

// UpdateCourse mocks base method.
func (m *MockDatabase) UpdateCourse(arg0 int32, arg1 string, arg2 int32) (structs.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", arg0, arg1, arg2)
	ret0, _ := ret[0].(structs.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockDatabaseMockRecorder) UpdateCourse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockDatabase)(nil).UpdateCourse), arg0, arg1, arg2)
}
